<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="20" total="24" passed="4" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-11-24T04:13:50 IST" name="RestAPI : Regression Suite by Groups" finished-at="2024-11-24T04:13:58 IST" duration-ms="8402">
    <groups>
      <group name="RegressionSuite">
        <method signature="PostmanEcho.automateBasicAuth()[pri:13, instance:userManagement.PostmanEcho@4b741d6d]" name="automateBasicAuth" class="userManagement.PostmanEcho"/>
        <method signature="getUser.testDataFromJSONFile()[pri:16, instance:userManagement.getUser@543295b0]" name="testDataFromJSONFile" class="userManagement.getUser"/>
        <method signature="getUser.testDataFromJSON_dataFromPropertiesFile()[pri:17, instance:userManagement.getUser@543295b0]" name="testDataFromJSON_dataFromPropertiesFile" class="userManagement.getUser"/>
        <method signature="getUser.automateMultipleQueryParamsUsingMap()[pri:18, instance:userManagement.getUser@543295b0]" name="automateMultipleQueryParamsUsingMap" class="userManagement.getUser"/>
      </group> <!-- RegressionSuite -->
      <group name="SmokeSuite">
        <method signature="PostmanEcho.automateBasicAuth()[pri:13, instance:userManagement.PostmanEcho@4b741d6d]" name="automateBasicAuth" class="userManagement.PostmanEcho"/>
      </group> <!-- SmokeSuite -->
    </groups>
    <test started-at="2024-11-24T04:13:50 IST" name="Regression Suite by Groups" finished-at="2024-11-24T04:13:58 IST" duration-ms="8402">
      <class name="userManagement.PostmanEcho">
        <test-method is-config="true" signature="config(java.lang.String,java.lang.String)[pri:0, instance:userManagement.PostmanEcho@4b741d6d]" started-at="2024-11-24T04:13:49 IST" name="config" finished-at="2024-11-24T04:13:50 IST" duration-ms="464" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Optional name Automation ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[API Report]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- config -->
        <test-method is-config="true" signature="logBeforeMethod(java.lang.reflect.Method)[pri:0, instance:userManagement.PostmanEcho@4b741d6d]" started-at="2024-11-24T04:13:50 IST" name="logBeforeMethod" finished-at="2024-11-24T04:13:50 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void userManagement.PostmanEcho.automateBasicAuth()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logBeforeMethod -->
        <test-method signature="automateBasicAuth()[pri:13, instance:userManagement.PostmanEcho@4b741d6d]" started-at="2024-11-24T04:13:50 IST" name="automateBasicAuth" description="Automate Basic Authorization" finished-at="2024-11-24T04:13:54 IST" duration-ms="4339" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- automateBasicAuth -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:userManagement.PostmanEcho@4b741d6d]" started-at="2024-11-24T04:13:54 IST" name="getResult" finished-at="2024-11-24T04:13:54 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=automateBasicAuth status=SUCCESS method=PostmanEcho.automateBasicAuth()[pri:13, instance:userManagement.PostmanEcho@4b741d6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:userManagement.PostmanEcho@4b741d6d]" started-at="2024-11-24T04:13:58 IST" name="endReport" finished-at="2024-11-24T04:13:59 IST" duration-ms="426" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
      </class> <!-- userManagement.PostmanEcho -->
      <class name="userManagement.getUser">
        <test-method signature="testDataFromJSONFile()[pri:16, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:54 IST" name="testDataFromJSONFile" description="Fetch the TestData from JSON file and use in the script" finished-at="2024-11-24T04:13:56 IST" duration-ms="1904" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataFromJSONFile -->
        <test-method is-config="true" signature="logBeforeMethod(java.lang.reflect.Method)[pri:0, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:54 IST" name="logBeforeMethod" finished-at="2024-11-24T04:13:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void userManagement.getUser.testDataFromJSONFile() throws java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logBeforeMethod -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:56 IST" name="getResult" finished-at="2024-11-24T04:13:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDataFromJSONFile status=SUCCESS method=getUser.testDataFromJSONFile()[pri:16, instance:userManagement.getUser@543295b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method is-config="true" signature="logBeforeMethod(java.lang.reflect.Method)[pri:0, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:56 IST" name="logBeforeMethod" finished-at="2024-11-24T04:13:56 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void userManagement.getUser.testDataFromJSON_dataFromPropertiesFile() throws java.io.IOException,org.json.simple.parser.ParseException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logBeforeMethod -->
        <test-method signature="testDataFromJSON_dataFromPropertiesFile()[pri:17, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:56 IST" name="testDataFromJSON_dataFromPropertiesFile" description="Automate script using TestData from JSON and config from Properties file" finished-at="2024-11-24T04:13:58 IST" duration-ms="1850" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataFromJSON_dataFromPropertiesFile -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:58 IST" name="getResult" finished-at="2024-11-24T04:13:58 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDataFromJSON_dataFromPropertiesFile status=SUCCESS method=getUser.testDataFromJSON_dataFromPropertiesFile()[pri:17, instance:userManagement.getUser@543295b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method signature="automateMultipleQueryParamsUsingMap()[pri:18, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:58 IST" name="automateMultipleQueryParamsUsingMap" description="Automate multiple query parameters using Map" finished-at="2024-11-24T04:13:58 IST" duration-ms="218" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- automateMultipleQueryParamsUsingMap -->
        <test-method is-config="true" signature="logBeforeMethod(java.lang.reflect.Method)[pri:0, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:58 IST" name="logBeforeMethod" finished-at="2024-11-24T04:13:58 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void userManagement.getUser.automateMultipleQueryParamsUsingMap()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logBeforeMethod -->
        <test-method is-config="true" signature="getResult(org.testng.ITestResult)[pri:0, instance:userManagement.getUser@543295b0]" started-at="2024-11-24T04:13:58 IST" name="getResult" finished-at="2024-11-24T04:13:58 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=automateMultipleQueryParamsUsingMap status=SUCCESS method=getUser.automateMultipleQueryParamsUsingMap()[pri:18, instance:userManagement.getUser@543295b0] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
      </class> <!-- userManagement.getUser -->
    </test> <!-- Regression Suite by Groups -->
  </suite> <!-- RestAPI : Regression Suite by Groups -->
</testng-results>
